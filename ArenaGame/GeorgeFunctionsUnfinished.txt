//Gets a single Parse Object from Parse based on a passed in Object ID value
	//currentObject was originally a global variable. It is not needed due to changing
	//The return type but I left it for convenience.
	public ParseObject getParseObject(String objectID) throws ParseException {
		ParseQuery<ParseObject> query = ParseQuery.getQuery("Gladiator");

		try {
			currentObject = query.get(objectID);
			return currentObject;
		} catch (com.parse.ParseException e) {
			Log.d("Error", "Did not find Parse Object");
		}

		return null;
	}

	//Returns a GameMaster object that has room for a new player to join
	//Gathers a list of currently open matches from Parse and then joins the passed in Gladiator to the game. It increments the player counter and determines if the Match is full or not.
	public ParseObject joinMatchParse(String gladID) throws ParseException, com.parse.ParseException {
		ParseQuery<ParseObject> query = ParseQuery.getQuery("GameMaster");
		query.whereEqualTo("isFull", false);
		List<ParseObject> gameList = query.find();

		ParseObject selectedGame = gameList.get(0);

		if (gameList.isEmpty()) {
			Log.d("NoMatchFound", "No empty matches were found");
			return null;

		} else {
			Log.d("MatchFound", "!!!");
			int currentPlayerNumber = selectedGame.getInt("players");

			ParseObject addGlad = getParseObject(gladID);
			selectedGame.add("Gladiators", addGlad);
			currentPlayerNumber++;
			Log.d("PlayerTotal", Integer.toString(currentPlayerNumber));

			selectedGame.put("players", currentPlayerNumber);

			if (currentPlayerNumber == 2)
			{
				Log.d("GameFull", "The Game Is Full!");
				selectedGame.put("isFull", true);
			}

			update(selectedGame);

			return selectedGame;
		}
	}

	//Creates a new map and a new GameMaster Object and saves it to Parse
	//Make sure the ACL Public access is set otherwise you can not update match objects later
	//The map and mapID stuff is temporary default values. Handle this however we decide to do this.
	public void createMatch(String gladID) throws ParseException {
		ParseObject newMap = new ParseObject("Map");

		//Temporary default value
		newMap.put("objectID", "777");
		update(newMap);

		ParseObject addGlad;
		addGlad = getParseObject(gladID);

		ParseObject match = new ParseObject("GameMaster");
		match.put("isFalse", false);
		match.put("isFull", false);
		match.put("players", 1);

		//Gladiators is an array in the GameMaster object. This might not work
		match.add("Gladiators", addGlad);

		//Owner

		//Temporary input value
		match.put("MapId", "777");

		ParseACL postACL = new ParseACL(ParseUser.getCurrentUser());
		postACL.setPublicReadAccess(true);
		postACL.setPublicWriteAccess(true);
		match.setACL(postACL);

		update(match);

	}

	//Grabs a JSONArray from the Cell field of a Map
	//Checks if the specified X and Y position are occupied
	//TODO: This is not finished. Robert and Steven have more experience with the game logic end of this
	public boolean isCellOccupied(int x, int y, String mapID) throws ParseException {

		ParseObject currentMap;
		currentMap = getParseObject(mapID);

		//Need JSONArray to handle the cells
		JSONArray cellArray = currentMap.getJSONArray("Cell");

		/*
		if(cellArray[x][y] == null)
		{
			return false;
		}

		else
		{
			return true;
		}*/

		return true;

	}

	//Deletes the passed in Parse Object from Parse
	public void delete(ParseObject deleteMe)
	{
		deleteMe.deleteInBackground();
	}

	//Updates the passed in Parse object and saves it on Parse
	public void update(ParseObject newPO)
	{
		newPO.saveInBackground();
	}